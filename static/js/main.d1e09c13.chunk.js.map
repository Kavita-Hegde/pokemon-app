{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","name","toLowerCase","height","width","type","CardList","map","key","id","SearchBox","placeholder","handleChange","onChange","App","state","seachField","pokemon","this","filteredMonsters","filter","includes","e","setState","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAGaA,G,kBAAM,SAACC,GAAD,OACf,yBAAKC,UAAU,kBAEX,yBAAKC,IAAI,UACTC,IAAG,4CAAuCH,EAAMI,QAAQC,KAAKC,cAA1D,QAA+EC,OAAO,MAAMC,MAAM,QACrG,4BAAKR,EAAMI,QAAQC,MACnB,2BAAKL,EAAMI,QAAQK,SCNdC,EAAW,SAACV,GAGrB,OAAQ,yBAAKC,UAAU,aAAf,KACJD,EAAMI,QAAQO,KAAI,SAAAP,GAAO,OAAM,kBAAC,EAAD,CAAMQ,IAAKR,EAAQS,GAAIT,QAASA,SCF1DU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACAf,UAAU,SACVQ,KAAK,SACLM,YAAaA,EACbE,SAAUD,MCsHCE,E,YAxHb,aAAc,IAAD,8BACX,+CACKC,MAAO,CACVf,QAAQ,GACRgB,WAAa,GACbC,QAAQ,CACN,CACEhB,KAAK,UACLQ,GAAI,KACJJ,KAAO,oBAET,CACEJ,KAAK,UACLQ,GAAI,KACJJ,KAAO,oBAET,CACEJ,KAAK,YACLQ,GAAI,KACJJ,KAAO,iBAET,CACEJ,KAAK,WACLQ,GAAI,KACJJ,KAAO,eAET,CACEJ,KAAK,QACLQ,GAAI,KACJJ,KAAO,qBAET,CACEJ,KAAK,WACLQ,GAAI,KACJJ,KAAO,iBAET,CACEJ,KAAK,YACLQ,GAAI,KACJJ,KAAO,iBAET,CACEJ,KAAK,aACLQ,GAAI,KACJJ,KAAO,eAET,CACEJ,KAAK,UACLQ,GAAI,KACJJ,KAAO,iBAET,CACEJ,KAAK,SACLQ,GAAI,MACJJ,KAAO,uBAET,CACEJ,KAAK,QACLQ,GAAI,MACJJ,KAAO,qBAET,CACEJ,KAAK,SACLQ,GAAI,MACJJ,KAAO,qBAhEF,E,sEA4EJ,IAAD,SAEiCa,KAAKH,MAA5BC,GAFV,EAEChB,QAFD,EAEUgB,YAEVG,EAJA,EAEsBF,QAEKG,QAAO,SAAAH,GAAO,OAAIA,EAAQhB,KAAKC,cAC/DmB,SAASL,EAAWd,kBAErB,OACE,yBAAKL,UAAU,OACb,+CACA,kBAAC,EAAD,CACAc,YAAY,kBACZC,aAAc,SAAAU,GAAC,OACd,EAAKC,SAAS,CAACP,WAAaM,EAAEE,OAAOC,WAEtC,kBAAC,EAAD,CAAUzB,QAASmB,IAEnB,kC,GA/FUO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1e09c13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card= (props) => ( \r\n    <div className=\"card-container\">\r\n    \r\n        <img alt=\"monster\" \r\n        src={`https://img.pokemondb.net/artwork/${props.monster.name.toLowerCase()}.jpg`} height=\"200\" width=\"200\"  />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{ props.monster.type}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component';\r\nexport const CardList = (props) => \r\n{\r\n\r\n    return (<div className=\"card-list\">  {\r\n        props.monster.map(monster  => (<Card key={monster.id} monster={monster}/>))\r\n      } \r\n      </div>)}","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type=\"search\" \r\n    placeholder={placeholder}\r\n    onChange={handleChange}/>\r\n)"," import React , { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state ={\n      monster:[],\n      seachField : '',\n      pokemon:[\n        {\n          name:'Pikachu',\n          id: 'p1',\n          type : 'Electric Pokemon'\n        },\n        {\n          name:'Snorlax',\n          id: 'p2',\n          type : 'Sleeping Pokemon'\n        },\n        {\n          name:'Charizard',\n          id: 'p3',\n          type : 'Flame Pokemon'\n        },\n        {\n          name:'Caterpie',\n          id: 'p4',\n          type : 'Bug Pokemon'\n        },\n        {\n          name:'Eevee',\n          id: 'p5',\n          type : 'Evolution Pokemon'\n        },\n        {\n          name:'Squirtle',\n          id: 'p6',\n          type : 'Water Pokemon'\n        },\n        {\n          name:'Bulbasaur',\n          id: 'p7',\n          type : 'Grass Pokemon'\n        },\n        {\n          name:'Butterfree',\n          id: 'p8',\n          type : 'Bug Pokemon'\n        },\n        {\n          name:'Psyduck',\n          id: 'p9',\n          type : 'Water Pokemon'\n        },\n        {\n          name:'Lapras',\n          id: 'p10',\n          type : 'Water & Ice Pokemon'\n        },\n        {\n          name:'Ditto',\n          id: 'p11',\n          type : 'Transform Pokemon'\n        },\n        {\n          name:'Mewtwo',\n          id: 'p12',\n          type : 'Psychic Pokemon'\n        }\n     ]\n    }\n  }\n\n  // componentDidMount(){\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //   .then(response => response.json())\n  //   .then(users => this.setState({monster : users}));\n  // }\n\n  render(){\n\n    const {monster, seachField, pokemon} = this.state;\n\n    const filteredMonsters = pokemon.filter(pokemon => pokemon.name.toLowerCase()\n    .includes(seachField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>POKEMON ROLODEX</h1>\n        <SearchBox\n        placeholder=\"Search Pokemons\" \n        handleChange={e => \n         this.setState({seachField : e.target.value})\n          }/>\n        <CardList monster={filteredMonsters}>\n        </CardList>\n        <br></br>\n      </div>\n    );\n  }\n\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           <h1>Hello Medhansh</h1>\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}